Always prioritize efficiency: rewrite or edit only the necessary code to implement each request; avoid rewriting entire files if not required.

Ensure everything is beautiful and production-ready: use clean, modern UI patterns, accessible design, intuitive layouts, and well-organized styling.

Keep the ElderCare Core App cleanly modular: build reusable, clearly named components whenever it makes sense for easy future editing and scaling.

Maintain clear separation between the Core App, the Resource Directory, and other feature modules â€” integrate them smoothly while keeping each self-contained.

Ensure resource categories, service types, and form structures are easily manageable for non-developers: use clear JSON lists, organized dropdowns, and alphabetical ordering.

When adding new features (like AI search, ratings, filters), follow existing design and code patterns, and reuse or extend components where possible.

Connect all database interactions to the existing Firebase project. Avoid redundant environment variables or duplicate config files.

Support user-friendly actions: enable drag-and-drop for logos, resource images, and allow bulk imports when needed.

Prioritize a senior-friendly user experience: simple navigation, large readable elements, clear labels, and minimal clicks to complete actions.

Maintain a clean, organized component structure: group related files logically, write clear comments for non-obvious logic, and keep code easy to maintain.

Respect token usage: avoid verbose or redundant code. Write concise, robust, maintainable solutions.